import math, itertools
import numpy as np
import pandas as pd
import plotly.graph_objects as go

def compute_phi_and_mode(max_d, sides):
    deltas = []
    modes  = []
    for d in range(1, max_d+1):
        # tally sums
        counts = {}
        for roll in itertools.product(range(1, sides+1), repeat=d):
            s = sum(roll)
            counts[s] = counts.get(s, 0) + 1

        # collapse-potential per-sum: log(count+1)
        log_terms = {s: math.log(c+1) for s, c in counts.items()}
        # mode from the largest term
        mode_sum = max(log_terms, key=log_terms.get)
        modes.append(mode_sum)

        # E_up and E_down
        E_up   = d * math.log(sides + 1)
        E_down = sum(log_terms.values())
        deltas.append(E_down - E_up)

    # discrete curvature
    phis = [0.0]
    for i in range(1, len(deltas)-1):
        phis.append(deltas[i+1] - 2*deltas[i] + deltas[i-1])
    phis.append(0.0)

    return np.array(phis), np.array(modes)

def plot_interactive_emergence(max_d=6, sides_list=(4,6,8)):
    ds = list(range(1, max_d+1))

    # First, print a table to validate numbers
    table = {'d': ds}
    for s in sides_list:
        phis, modes = compute_phi_and_mode(max_d, s)
        table[f'mode_{s}'] = modes
        table[f'phi_{s}']  = phis
    df = pd.DataFrame(table)
    print("Validation table (d, mode, phi):\n", df.to_string(index=False))

    # Now the interactive plot
    fig = go.Figure()
    for sides in sides_list:
        phis, modes = compute_phi_and_mode(max_d, sides)
        fig.add_trace(go.Scatter(
            x=ds,
            y=modes,
            mode='lines+markers',
            name=f'{sides}-sided mode',
            marker=dict(size=8),
            hovertemplate=(
                '<b>Dice:</b> '+str(sides)+'-sided<br>'+
                '<b>d:</b> %{x}<br>'+
                '<b>Mode:</b> %{y}<br>'+
                '<b>Î¦:</b> %{customdata:.3f}<extra></extra>'
            ),
            customdata=phis
        ))

    fig.update_layout(
        title='Emergence as Most Probably Sum on Dice',
        xaxis_title='Number of Dice',
        yaxis_title='Most Common Sum',
        hovermode='closest'
    )
    fig.show()

if __name__ == "__main__":
    plot_interactive_emergence(max_d=8, sides_list=(4,6,8))
